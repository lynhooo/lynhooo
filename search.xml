<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EDSR</title>
    <url>/2024/06/10/EDSR/</url>
    <content><![CDATA[<p><code>SR</code>, <code>Super Resolution</code>, <code>CNN</code>, <code>Deep Learning</code></p>
<span id="more"></span>

<h1 id="EDSR"><a href="#EDSR" class="headerlink" title="EDSR"></a>EDSR</h1><ul>
<li>参考文献：<a href="https://arxiv.org/pdf/1707.02921">Lim, B., Son, S., Kim, H., Lee, K., &amp; Lee, K. M. (2017). Enhanced deep residual networks for single image super-resolution. In <em>Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR)</em> (pp. 136-144).</a></li>
</ul>
<h2 id="tool-func"><a href="#tool-func" class="headerlink" title="tool func"></a>tool func</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_weights</span>(<span class="params">net_list, scale=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(net_list, <span class="built_in">list</span>): net_list = [net_list]</span><br><span class="line">    <span class="keyword">for</span> net <span class="keyword">in</span> net_list:</span><br><span class="line">        <span class="keyword">for</span> module <span class="keyword">in</span> net.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, nn.Conv2d):</span><br><span class="line">                init.kaiming_normal_(module.weight, a=<span class="number">0</span>, mode=<span class="string">&#x27;fan_in&#x27;</span>)</span><br><span class="line">                module.weight.data *= scale</span><br><span class="line">                <span class="keyword">if</span> module.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: module.bias.data.zero_()</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(module, nn.Linear):</span><br><span class="line">                init.kaiming_normal_(module.weight, a=<span class="number">0</span>, mode=<span class="string">&#x27;fan_in&#x27;</span>)</span><br><span class="line">                module.weight.data *= scale</span><br><span class="line">                <span class="keyword">if</span> module.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: module.bias.data.zero_()</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(module, nn.BatchNorm2d):</span><br><span class="line">                init.constant_(module.weight, <span class="number">1</span>)</span><br><span class="line">                init.constant_(module.bias.data, <span class="number">0.0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Unknown Module:&#x27;</span>, module)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_layer</span>(<span class="params">block, n_layers</span>):</span><br><span class="line">    layers = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n_layers):</span><br><span class="line">        layers.append(block())</span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(*layers)</span><br></pre></td></tr></table></figure>

<h2 id="residual-block"><a href="#residual-block" class="headerlink" title="residual block"></a>residual block</h2><p><img src="/images/posts/edsr_resblock.png" alt="res block"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResidualBlockWithoutBN</span>(nn.Module):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Residual block without BN layer</span></span><br><span class="line"><span class="string">    ---Conv - ReLU - Conv -+-</span></span><br><span class="line"><span class="string">     |_____________________|</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nf=<span class="number">64</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(nf, nf, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(nf, nf, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">        initialize_weights([<span class="variable language_">self</span>.conv1, <span class="variable language_">self</span>.conv2], <span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        identity = x</span><br><span class="line">        out = F.relu(<span class="variable language_">self</span>.conv1(x), inplace=<span class="literal">True</span>) <span class="comment"># inplace-选择是否进行覆盖运算</span></span><br><span class="line">        out = <span class="variable language_">self</span>.conv2(out)</span><br><span class="line">        <span class="keyword">return</span> identity + out</span><br></pre></td></tr></table></figure>

<h2 id="EDSR-Architecture"><a href="#EDSR-Architecture" class="headerlink" title="EDSR Architecture"></a>EDSR Architecture</h2><p><img src="/images/posts/edsr_arch.png" alt="res block"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EDSRNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="literal">None</span>, in_nc=<span class="number">3</span>, out_nc=<span class="number">3</span>, nf=<span class="number">64</span>, nb=<span class="number">16</span>, upscale=<span class="number">4</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.upscale = upscale</span><br><span class="line">        <span class="variable language_">self</span>.head = nn.Conv2d(in_nc, nf, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">        basic_block = func.partial(ResidualBlockWithoutBN, nf=nf)</span><br><span class="line">        <span class="variable language_">self</span>.body = make_layer(basic_block, nb)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.upscale == <span class="number">2</span>:</span><br><span class="line">            <span class="variable language_">self</span>.conv_up1 = nn.Conv2d(nf, nf*<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.pxl_shuffle = nn.PixelShuffle(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.upscale == <span class="number">3</span>:</span><br><span class="line">            <span class="variable language_">self</span>.conv_up1 = nn.Conv2d(nf, nf*<span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.pxl_shuffle = nn.PixelShuffle(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.upscale == <span class="number">4</span>:</span><br><span class="line">            <span class="variable language_">self</span>.conv_up1 = nn.Conv2d(nf, nf*<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.conv_up2 = nn.Conv2d(nf, nf*<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.pxl_shuffle = nn.PixelShuffle(<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.tail = nn.Conv2d(nf, out_nc, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, bias=<span class="literal">True</span>)</span><br><span class="line">        initialize_weights([<span class="variable language_">self</span>.head, <span class="variable language_">self</span>.conv_up1, <span class="variable language_">self</span>.tail], <span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.upscale == <span class="number">4</span>: initialize_weights(<span class="variable language_">self</span>.conv_up2, <span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        feature = <span class="variable language_">self</span>.head(x)</span><br><span class="line">        output  = <span class="variable language_">self</span>.body(feature) + feature</span><br><span class="line">        </span><br><span class="line">        output  = <span class="variable language_">self</span>.pxl_shuffle(<span class="variable language_">self</span>.conv_up1(output))</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.upscale == <span class="number">4</span>:</span><br><span class="line">            output = <span class="variable language_">self</span>.pxl_shuffle(<span class="variable language_">self</span>.conv_up2(output))</span><br><span class="line">        </span><br><span class="line">        final =  <span class="variable language_">self</span>.tail(output)</span><br><span class="line">        <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>

<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><h3 id="Prepare-Dataset-and-Dataloader"><a href="#Prepare-Dataset-and-Dataloader" class="headerlink" title="Prepare Dataset and Dataloader"></a>Prepare Dataset and Dataloader</h3><ul>
<li>Create LMDB dataset<ul>
<li>prepare SR dataset with <a href="http://people.ee.ethz.ch/~timofter/publications/Agustsson-CVPRW-2017.pdf">DIV2K</a> refer to <a href="https://github.com/xinntao/BasicSR">BasicSR</a></li>
</ul>
</li>
<li>Load LMDB dataset for EDSR<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IMG_EXTENSIONS = [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image_info_from_lmdb</span>(<span class="params">data_root</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(data_root, <span class="string">&#x27;meta_info.pkl&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        meta_info = pickle.load(fp)</span><br><span class="line">        img_names = meta_info[<span class="string">&#x27;keys&#x27;</span>]</span><br><span class="line">        img_sizes = meta_info[<span class="string">&#x27;resolution&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(img_sizes) == <span class="number">1</span>: img_sizes = img_sizes * <span class="built_in">len</span>(img_names)</span><br><span class="line">        <span class="keyword">return</span> img_names, img_sizes</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image_info_from_image</span>(<span class="params">img_dir</span>):</span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> basedir, _, fnames <span class="keyword">in</span> <span class="built_in">sorted</span>(os.walk(img_dir)):</span><br><span class="line">        <span class="keyword">for</span> fname <span class="keyword">in</span> fnames:</span><br><span class="line">            <span class="keyword">if</span> os.path.splitext(fname)[-<span class="number">1</span>].lower() <span class="keyword">in</span> IMG_EXTENSIONS:</span><br><span class="line">                img_path = os.path.join(basedir, fname)</span><br><span class="line">                images.append(img_path)</span><br><span class="line">    <span class="keyword">assert</span> images, <span class="string">&#x27;None image in %s&#x27;</span>%img_dir</span><br><span class="line">    <span class="keyword">return</span> images</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_imageset</span>(<span class="params">data_root, data_type</span>):</span><br><span class="line">    images, sizes = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> data_root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> data_type == <span class="string">&#x27;lmdb&#x27;</span>:</span><br><span class="line">            images, sizes = get_image_info_from_lmdb(data_root)</span><br><span class="line">        <span class="keyword">elif</span> data_type == <span class="string">&#x27;image&#x27;</span>:</span><br><span class="line">            images = get_image_info_from_image(data_root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;ERROR: UNKOWN data type: %s&#x27;</span>%data_type)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> images, sizes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_image_lmdb</span>(<span class="params">env, key, size</span>):</span><br><span class="line">    <span class="keyword">with</span> env.begin(write=<span class="literal">False</span>) <span class="keyword">as</span> txn:</span><br><span class="line">        buf = txn.get(key.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    img_flat = np.frombuffer(buf, dtype=np.uint8)</span><br><span class="line">    c, h, w = size</span><br><span class="line">    <span class="keyword">return</span> img_flat.reshape(h, w, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_image</span>(<span class="params">env, path, size=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> env <span class="keyword">is</span> <span class="literal">None</span>: img = cv2.imread(path, cv2.IMREAD_UNCHANGED)</span><br><span class="line">    <span class="keyword">else</span>           : img = read_image_lmdb(env, path, size)</span><br><span class="line">    img = img.astype(np.float32) / <span class="number">255.</span></span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">2</span>: img = np.expand_dims(img, axis=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> img.shape[<span class="number">2</span>] &gt; <span class="number">3</span>: img = img[...,:<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> img </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_crop</span>(<span class="params">img_in, scale</span>):</span><br><span class="line">    img = np.copy(img_in)</span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">2</span>:</span><br><span class="line">        h, w = img.shape</span><br><span class="line">        h_r, w_r = h%scale, w%scale</span><br><span class="line">        img = img[:h-h_r, :w-w_r]</span><br><span class="line">    <span class="keyword">elif</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        h, w, c = img.shape</span><br><span class="line">        h_r, w_r = h%scale, w%scale</span><br><span class="line">        img = img[:h-h_r, :w-w_r, :]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Wrong img ndim: [&#123;:d&#125;].&#x27;</span>.<span class="built_in">format</span>(img.ndim))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bgr2ycbcr</span>(<span class="params">img, only_y=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;bgr version of rgb2ycbcr</span></span><br><span class="line"><span class="string">    only_y: only return Y channel</span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">        uint8, [0, 255]</span></span><br><span class="line"><span class="string">        float, [0, 1]</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    in_img_type = img.dtype</span><br><span class="line">    img.astype(np.float32)</span><br><span class="line">    <span class="keyword">if</span> in_img_type != np.uint8:</span><br><span class="line">        img *= <span class="number">255.</span></span><br><span class="line">    <span class="comment"># convert</span></span><br><span class="line">    <span class="keyword">if</span> only_y:</span><br><span class="line">        rlt = np.dot(img, [<span class="number">24.966</span>, <span class="number">128.553</span>, <span class="number">65.481</span>]) / <span class="number">255.0</span> + <span class="number">16.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rlt = np.matmul(img, [[<span class="number">24.966</span>, <span class="number">112.0</span>, -<span class="number">18.214</span>], [<span class="number">128.553</span>, -<span class="number">74.203</span>, -<span class="number">93.786</span>],</span><br><span class="line">                              [<span class="number">65.481</span>, -<span class="number">37.797</span>, <span class="number">112.0</span>]]) / <span class="number">255.0</span> + [<span class="number">16</span>, <span class="number">128</span>, <span class="number">128</span>]</span><br><span class="line">    <span class="keyword">if</span> in_img_type == np.uint8:</span><br><span class="line">        rlt = rlt.<span class="built_in">round</span>()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rlt /= <span class="number">255.</span></span><br><span class="line">    <span class="keyword">return</span> rlt.astype(in_img_type)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">channel_convert</span>(<span class="params">in_c, target_type, img_list</span>):</span><br><span class="line">    <span class="comment"># conversion among BGR, gray and y</span></span><br><span class="line">    <span class="keyword">if</span> in_c == <span class="number">3</span> <span class="keyword">and</span> target_type == <span class="string">&#x27;gray&#x27;</span>:  <span class="comment"># BGR to gray</span></span><br><span class="line">        gray_list = [cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) <span class="keyword">for</span> img <span class="keyword">in</span> img_list]</span><br><span class="line">        <span class="keyword">return</span> [np.expand_dims(img, axis=<span class="number">2</span>) <span class="keyword">for</span> img <span class="keyword">in</span> gray_list]</span><br><span class="line">    <span class="keyword">elif</span> in_c == <span class="number">3</span> <span class="keyword">and</span> target_type == <span class="string">&#x27;y&#x27;</span>:  <span class="comment"># BGR to y</span></span><br><span class="line">        y_list = [bgr2ycbcr(img, only_y=<span class="literal">True</span>) <span class="keyword">for</span> img <span class="keyword">in</span> img_list]</span><br><span class="line">        <span class="keyword">return</span> [np.expand_dims(img, axis=<span class="number">2</span>) <span class="keyword">for</span> img <span class="keyword">in</span> y_list]</span><br><span class="line">    <span class="keyword">elif</span> in_c == <span class="number">1</span> <span class="keyword">and</span> target_type == <span class="string">&#x27;RGB&#x27;</span>:  <span class="comment"># gray/y to BGR</span></span><br><span class="line">        <span class="keyword">return</span> [cv2.cvtColor(img, cv2.COLOR_GRAY2BGR) <span class="keyword">for</span> img <span class="keyword">in</span> img_list]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> img_list</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">augment</span>(<span class="params">img_list, flip_en=<span class="literal">True</span>, rotate_en=<span class="literal">True</span></span>):</span><br><span class="line">    flip_h = flip_en <span class="keyword">and</span> random.random() &lt; <span class="number">0.5</span></span><br><span class="line">    flip_v = flip_en <span class="keyword">and</span> random.random() &lt; <span class="number">0.5</span></span><br><span class="line">    rota90 = rotate_en <span class="keyword">and</span> random.random() &lt; <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_augment</span>(<span class="params">img</span>):</span><br><span class="line">        <span class="keyword">if</span> flip_h: img = img[:,::-<span class="number">1</span>,:]</span><br><span class="line">        <span class="keyword">if</span> flip_v: img = img[::-<span class="number">1</span>,:,:]</span><br><span class="line">        <span class="keyword">if</span> rota90: img = img.transpose(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> img</span><br><span class="line">    <span class="keyword">return</span> [_augment(img) <span class="keyword">for</span> img <span class="keyword">in</span> img_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_dataloader</span>(<span class="params">dataset, data_info, sampler=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> data_info[<span class="string">&#x27;phase&#x27;</span>] == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">        num_workers = data_info[<span class="string">&#x27;n_workers&#x27;</span>] * <span class="built_in">len</span>(data_info[<span class="string">&#x27;gpu_ids&#x27;</span>])</span><br><span class="line">        batch_size = data_info[<span class="string">&#x27;batch_size&#x27;</span>]</span><br><span class="line">        shuffle = data_info[<span class="string">&#x27;shuffle_en&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers,</span><br><span class="line">                                           sampler=sampler, drop_last=<span class="literal">True</span>, pin_memory=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> torch.utils.data.DataLoader(datase, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">1</span>, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LrGtDataset</span>(data.Dataset):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_info, scale</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.data_info = data_info</span><br><span class="line">        <span class="variable language_">self</span>.scale    = scale</span><br><span class="line">        <span class="variable language_">self</span>.lr_env   = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.gt_env   = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.lr_names, <span class="variable language_">self</span>.lr_sizes = get_imageset(data_info[<span class="string">&#x27;lr_data_root&#x27;</span>], data_info[<span class="string">&#x27;data_type&#x27;</span>])</span><br><span class="line">        <span class="variable language_">self</span>.gt_names, <span class="variable language_">self</span>.gt_sizes = get_imageset(data_info[<span class="string">&#x27;gt_data_root&#x27;</span>], data_info[<span class="string">&#x27;data_type&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">assert</span> <span class="variable language_">self</span>.gt_names, <span class="string">&#x27;ERROR: None GroundTruth to read&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.gt_names) == <span class="built_in">len</span>(<span class="variable language_">self</span>.lr_names), <span class="string">&#x27;ERROR: training set DONOT match ground truth: lr - %d, gt - %d&#x27;</span>%(<span class="built_in">len</span>(<span class="variable language_">self</span>.lr_names), <span class="built_in">len</span>(<span class="variable language_">self</span>.gt_names))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.gt_names)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.data_info[<span class="string">&#x27;data_type&#x27;</span>] == <span class="string">&#x27;lmdb&#x27;</span> <span class="keyword">and</span> ((<span class="variable language_">self</span>.lr_env <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">or</span> (<span class="variable language_">self</span>.gt_env <span class="keyword">is</span> <span class="literal">None</span>)):</span><br><span class="line">            <span class="variable language_">self</span>.lr_env = lmdb.<span class="built_in">open</span>(<span class="variable language_">self</span>.data_info[<span class="string">&#x27;lr_data_root&#x27;</span>], readonly=<span class="literal">True</span>, lock=<span class="literal">False</span>, readahead=<span class="literal">False</span>, meminit=<span class="literal">False</span>)</span><br><span class="line">            <span class="variable language_">self</span>.gt_env = lmdb.<span class="built_in">open</span>(<span class="variable language_">self</span>.data_info[<span class="string">&#x27;gt_data_root&#x27;</span>], readonly=<span class="literal">True</span>, lock=<span class="literal">False</span>, readahead=<span class="literal">False</span>, meminit=<span class="literal">False</span>)</span><br><span class="line">        gt_size = <span class="variable language_">self</span>.data_info[<span class="string">&#x27;gt_size&#x27;</span>]</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># get ground truth</span></span><br><span class="line">        gt_name = <span class="variable language_">self</span>.gt_names[index]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.data_info[<span class="string">&#x27;data_type&#x27;</span>] == <span class="string">&#x27;lmdb&#x27;</span>:</span><br><span class="line">            resolution = [<span class="built_in">int</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> <span class="variable language_">self</span>.gt_sizes[index].split(<span class="string">&#x27;_&#x27;</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resolution = <span class="literal">None</span></span><br><span class="line">        gt_image = read_image(<span class="variable language_">self</span>.gt_env, gt_name, resolution)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.data_info[<span class="string">&#x27;phase&#x27;</span>] != <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            gt_image = mod_crop(gt_image, <span class="variable language_">self</span>.scale)</span><br><span class="line">                </span><br><span class="line">        <span class="comment"># get lr image</span></span><br><span class="line">        lr_name = <span class="variable language_">self</span>.lr_names[index]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.data_info[<span class="string">&#x27;data_type&#x27;</span>] == <span class="string">&#x27;lmdb&#x27;</span>:</span><br><span class="line">            resolution = [<span class="built_in">int</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> <span class="variable language_">self</span>.lr_sizes[index].split(<span class="string">&#x27;_&#x27;</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resolution = <span class="literal">None</span></span><br><span class="line">        lr_image = read_image(<span class="variable language_">self</span>.lr_env, lr_name, resolution)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.data_info[<span class="string">&#x27;phase&#x27;</span>] == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            h, w, c = lr_image.shape</span><br><span class="line">            lr_size = gt_size // <span class="variable language_">self</span>.scale</span><br><span class="line">            </span><br><span class="line">            rand_h_lr = random.randint(<span class="number">0</span>, <span class="built_in">max</span>(<span class="number">0</span>, h-lr_size))</span><br><span class="line">            rand_w_lr = random.randint(<span class="number">0</span>, <span class="built_in">max</span>(<span class="number">0</span>, w-lr_size))</span><br><span class="line">            rand_h_gt = <span class="built_in">int</span>(rand_h_lr*<span class="variable language_">self</span>.scale)</span><br><span class="line">            rand_w_gt = <span class="built_in">int</span>(rand_w_lr*<span class="variable language_">self</span>.scale)</span><br><span class="line">            lr_image = lr_image[rand_h_lr:rand_h_lr+lr_size, rand_w_lr:rand_w_lr+lr_size, :]</span><br><span class="line">            gt_image = gt_image[rand_h_gt:rand_h_gt+gt_size, rand_w_gt:rand_w_gt+gt_size, :]</span><br><span class="line">            </span><br><span class="line">            lr_image, gt_image = augment([lr_image, gt_image], <span class="variable language_">self</span>.data_info[<span class="string">&#x27;flip_en&#x27;</span>], <span class="variable language_">self</span>.data_info[<span class="string">&#x27;rotate_en&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.data_info[<span class="string">&#x27;color_space&#x27;</span>]:</span><br><span class="line">            gt_image, lr_image = channel_convert(gt_image.shape[<span class="number">2</span>], <span class="variable language_">self</span>.data_info[<span class="string">&#x27;color_space&#x27;</span>], [gt_image, lr_image])[:<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> gt_image.shape[<span class="number">2</span>] == <span class="number">3</span>:</span><br><span class="line">            lr_image = lr_image[:,:,::-<span class="number">1</span>]</span><br><span class="line">            gt_image = gt_image[:,:,::-<span class="number">1</span>]</span><br><span class="line">        lr_image = torch.from_numpy(np.ascontiguousarray(np.transpose(lr_image, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)))).<span class="built_in">float</span>()</span><br><span class="line">        gt_image = torch.from_numpy(np.ascontiguousarray(np.transpose(gt_image, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)))).<span class="built_in">float</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;LR&#x27;</span>: lr_image, <span class="string">&#x27;GT&#x27;</span>: gt_image, <span class="string">&#x27;LR_name&#x27;</span>: lr_name, <span class="string">&#x27;GT_name&#x27;</span>: gt_name&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="learning-rate-scheduler"><a href="#learning-rate-scheduler" class="headerlink" title="learning rate scheduler"></a>learning rate scheduler</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CosineAnnealingLR_Restart</span>(<span class="title class_ inherited__">_LRScheduler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, optimizer, T_period, restarts=<span class="literal">None</span>, weights=<span class="literal">None</span>, eta_min=<span class="number">0</span>, last_epoch=-<span class="number">1</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.T_period = T_period</span><br><span class="line">        <span class="variable language_">self</span>.T_max = <span class="variable language_">self</span>.T_period[<span class="number">0</span>]</span><br><span class="line">        <span class="variable language_">self</span>.eta_min = eta_min</span><br><span class="line">        <span class="variable language_">self</span>.restarts = restarts <span class="keyword">if</span> restarts <span class="keyword">else</span> [<span class="number">0</span>]</span><br><span class="line">        <span class="variable language_">self</span>.restarts_weights = weights <span class="keyword">if</span> weights <span class="keyword">else</span> [<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.last_restart = <span class="number">0</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.restarts) == <span class="built_in">len</span>(<span class="variable language_">self</span>.restarts_weights), <span class="string">&#x27;restarts and their weights do not match.&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(optimizer, last_epoch)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_lr</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.last_epoch == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.base_lrs</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.last_epoch <span class="keyword">in</span> <span class="variable language_">self</span>.restarts:</span><br><span class="line">            <span class="variable language_">self</span>.last_restart = <span class="variable language_">self</span>.last_epoch</span><br><span class="line">            <span class="variable language_">self</span>.T_max = <span class="variable language_">self</span>.T_period[<span class="variable language_">self</span>.restarts.index(<span class="variable language_">self</span>.last_epoch) + <span class="number">1</span>]</span><br><span class="line">            weight = <span class="variable language_">self</span>.restart_weights[<span class="variable language_">self</span>.restarts.index(<span class="variable language_">self</span>.last_epoch)]</span><br><span class="line">            <span class="keyword">return</span> [group[<span class="string">&#x27;initial_lr&#x27;</span>] * weight <span class="keyword">for</span> group <span class="keyword">in</span> <span class="variable language_">self</span>.optimizer.param_groups]</span><br><span class="line">        <span class="keyword">elif</span> (<span class="variable language_">self</span>.last_epoch - <span class="variable language_">self</span>.last_restart - <span class="number">1</span> - <span class="variable language_">self</span>.T_max) % (<span class="number">2</span> * <span class="variable language_">self</span>.T_max) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                group[<span class="string">&#x27;lr&#x27;</span>] + (base_lr - <span class="variable language_">self</span>.eta_min) * (<span class="number">1</span> - math.cos(math.pi / <span class="variable language_">self</span>.T_max)) / <span class="number">2</span></span><br><span class="line">                <span class="keyword">for</span> base_lr, group <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="variable language_">self</span>.base_lrs, <span class="variable language_">self</span>.optimizer.param_groups)</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">return</span> [(<span class="number">1</span> + math.cos(math.pi * (<span class="variable language_">self</span>.last_epoch - <span class="variable language_">self</span>.last_restart) / <span class="variable language_">self</span>.T_max)) /</span><br><span class="line">                (<span class="number">1</span> + math.cos(math.pi * ((<span class="variable language_">self</span>.last_epoch - <span class="variable language_">self</span>.last_restart) - <span class="number">1</span>) / <span class="variable language_">self</span>.T_max)) *</span><br><span class="line">                (group[<span class="string">&#x27;lr&#x27;</span>] - <span class="variable language_">self</span>.eta_min) + <span class="variable language_">self</span>.eta_min</span><br><span class="line">                <span class="keyword">for</span> group <span class="keyword">in</span> <span class="variable language_">self</span>.optimizer.param_groups]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_set_lr</span>(<span class="params">optimizers, lr_groups_l</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; set learning rate for warmup,</span></span><br><span class="line"><span class="string">    lr_groups_l: list for lr_groups. each for a optimizer&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> optimizer, lr_groups <span class="keyword">in</span> <span class="built_in">zip</span>(optimizers, lr_groups_l):</span><br><span class="line">        <span class="keyword">for</span> param_group, lr <span class="keyword">in</span> <span class="built_in">zip</span>(optimizer.param_groups, lr_groups):</span><br><span class="line">            param_group[<span class="string">&#x27;lr&#x27;</span>] = lr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_init_lr</span>(<span class="params">optimizers</span>):</span><br><span class="line">    <span class="comment"># get the initial lr, which is set by the scheduler</span></span><br><span class="line">    init_lr_groups_l = []</span><br><span class="line">    <span class="keyword">for</span> optimizer <span class="keyword">in</span> optimizers:</span><br><span class="line">        init_lr_groups_l.append([v[<span class="string">&#x27;initial_lr&#x27;</span>] <span class="keyword">for</span> v <span class="keyword">in</span> optimizer.param_groups])</span><br><span class="line">    <span class="keyword">return</span> init_lr_groups_l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_learning_rate</span>(<span class="params">optimizers, schedulers, cur_iter, warmup_iter=-<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">for</span> scheduler <span class="keyword">in</span> schedulers:</span><br><span class="line">        scheduler.step()</span><br><span class="line">    <span class="comment">#### set up warm up learning rate</span></span><br><span class="line">    <span class="keyword">if</span> cur_iter &lt; warmup_iter:</span><br><span class="line">        <span class="comment"># get initial lr for each group</span></span><br><span class="line">        init_lr_g_l = _get_init_lr(optimizers)</span><br><span class="line">        <span class="comment"># modify warming-up learning rates</span></span><br><span class="line">        warm_up_lr_l = []</span><br><span class="line">        <span class="keyword">for</span> init_lr_g <span class="keyword">in</span> init_lr_g_l:</span><br><span class="line">            warm_up_lr_l.append([v / warmup_iter * cur_iter <span class="keyword">for</span> v <span class="keyword">in</span> init_lr_g])</span><br><span class="line">        <span class="comment"># set learning rate</span></span><br><span class="line">        _set_lr(optimizers, warm_up_lr_l)</span><br></pre></td></tr></table></figure>

<h3 id="basic-config"><a href="#basic-config" class="headerlink" title="basic config"></a>basic config</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lmdb_gt_path = <span class="string">r&#x27;./dataset/DIV2K/DIV2K_train_HR_sub.lmdb&#x27;</span></span><br><span class="line">lmdb_lr_path = <span class="string">r&#x27;./dataset/DIV2K/DIV2K_train_LR_unknown_sub/X2.lmdb&#x27;</span></span><br><span class="line"></span><br><span class="line">data_info = &#123;&#125;</span><br><span class="line"></span><br><span class="line">model_info = &#123;&#125;</span><br><span class="line">model_info[<span class="string">&#x27;upscale&#x27;</span>] = <span class="number">2</span></span><br><span class="line">model_info[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;edsr&#x27;</span></span><br><span class="line">model_info[<span class="string">&#x27;in_ch_num&#x27;</span>] = <span class="number">3</span></span><br><span class="line">model_info[<span class="string">&#x27;out_ch_num&#x27;</span>] = <span class="number">3</span></span><br><span class="line">model_info[<span class="string">&#x27;feature_num&#x27;</span>] = <span class="number">64</span></span><br><span class="line">model_info[<span class="string">&#x27;block_num&#x27;</span>] = <span class="number">16</span></span><br><span class="line">data_info[<span class="string">&#x27;model_info&#x27;</span>] = model_info</span><br><span class="line"></span><br><span class="line">train_info = &#123;&#125;</span><br><span class="line">train_info[<span class="string">&#x27;phase&#x27;</span>] = <span class="string">&#x27;train&#x27;</span></span><br><span class="line">train_info[<span class="string">&#x27;gt_size&#x27;</span>] = <span class="number">480</span></span><br><span class="line">train_info[<span class="string">&#x27;batch_size&#x27;</span>] = <span class="number">16</span></span><br><span class="line">train_info[<span class="string">&#x27;lr_data_root&#x27;</span>] = lmdb_lr_path</span><br><span class="line">train_info[<span class="string">&#x27;gt_data_root&#x27;</span>] = lmdb_gt_path</span><br><span class="line">train_info[<span class="string">&#x27;data_type&#x27;</span>] = <span class="string">&#x27;lmdb&#x27;</span></span><br><span class="line">train_info[<span class="string">&#x27;flip_en&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">train_info[<span class="string">&#x27;rotate_en&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">train_info[<span class="string">&#x27;shuffle_en&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">train_info[<span class="string">&#x27;color_space&#x27;</span>] = <span class="string">&#x27;RGB&#x27;</span></span><br><span class="line">train_info[<span class="string">&#x27;check_point_name&#x27;</span>] = <span class="literal">None</span></span><br><span class="line">train_info[<span class="string">&#x27;train_iter_num&#x27;</span>] = <span class="number">100000</span></span><br><span class="line">train_info[<span class="string">&#x27;n_workers&#x27;</span>] = <span class="number">0</span> <span class="keyword">if</span> platform.system()==<span class="string">&#x27;Windows&#x27;</span> <span class="keyword">else</span> <span class="number">4</span></span><br><span class="line">train_info[<span class="string">&#x27;gpu_ids&#x27;</span>] = [<span class="number">0</span>]</span><br><span class="line">train_info[<span class="string">&#x27;learning_rate&#x27;</span>] = <span class="number">2e-4</span></span><br><span class="line">train_info[<span class="string">&#x27;optim_betas&#x27;</span>] = [<span class="number">0.9</span>, <span class="number">0.99</span>]</span><br><span class="line">train_info[<span class="string">&#x27;eta_min&#x27;</span>] = <span class="number">1e-7</span></span><br><span class="line">train_info[<span class="string">&#x27;T_period&#x27;</span>] = [<span class="number">250000</span>, <span class="number">250000</span>, <span class="number">250000</span>, <span class="number">250000</span>]</span><br><span class="line">train_info[<span class="string">&#x27;restarts&#x27;</span>] = [<span class="number">250000</span>, <span class="number">500000</span>, <span class="number">750000</span>]</span><br><span class="line">train_info[<span class="string">&#x27;restart_weights&#x27;</span>] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">train_info[<span class="string">&#x27;warmup_iter&#x27;</span>] = -<span class="number">1</span></span><br><span class="line">train_info[<span class="string">&#x27;weight_decay&#x27;</span>] = <span class="number">0</span></span><br><span class="line">train_info[<span class="string">&#x27;pxl_criterion&#x27;</span>] = <span class="string">&#x27;l1&#x27;</span></span><br><span class="line">train_info[<span class="string">&#x27;pxl_weight&#x27;</span>] = <span class="number">1.0</span></span><br><span class="line">data_info[<span class="string">&#x27;train_info&#x27;</span>] = train_info</span><br><span class="line"></span><br><span class="line">train_set = LrGtDataset(train_info, model_info[<span class="string">&#x27;upscale&#x27;</span>])</span><br><span class="line">train_size = <span class="built_in">int</span>(math.ceil(<span class="built_in">len</span>(train_set)/train_info[<span class="string">&#x27;batch_size&#x27;</span>]))</span><br><span class="line">train_iters = train_info[<span class="string">&#x27;train_iter_num&#x27;</span>]</span><br><span class="line">train_epochs = math.ceil(train_iters/train_size)</span><br><span class="line">train_loader = create_dataloader(train_set, train_info, sampler=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#val_set = LrGtDataset(train_info, model_info[&#x27;upscale&#x27;])</span></span><br><span class="line"><span class="comment">#val_loader = create_dataloader(val_set)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_size, train_iters, train_epochs)</span><br></pre></td></tr></table></figure>

<h2 id="Train-EDSR"><a href="#Train-EDSR" class="headerlink" title="Train EDSR"></a>Train EDSR</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># model</span></span><br><span class="line">model = EDSRNet(name=model_info[<span class="string">&#x27;name&#x27;</span>], in_nc=model_info[<span class="string">&#x27;in_ch_num&#x27;</span>], out_nc=model_info[<span class="string">&#x27;out_ch_num&#x27;</span>],</span><br><span class="line">                nf=model_info[<span class="string">&#x27;feature_num&#x27;</span>], nb=model_info[<span class="string">&#x27;block_num&#x27;</span>], upscale=model_info[<span class="string">&#x27;upscale&#x27;</span>])</span><br><span class="line">model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loss function</span></span><br><span class="line"><span class="keyword">if</span>   train_info[<span class="string">&#x27;pxl_criterion&#x27;</span>] == <span class="string">&#x27;l1&#x27;</span>: loss_func = nn.L1Loss().to(device)</span><br><span class="line"><span class="keyword">elif</span> train_info[<span class="string">&#x27;pxl_criterion&#x27;</span>] == <span class="string">&#x27;l2&#x27;</span>: loss_func = nn.MSELoss().to(device)</span><br><span class="line"><span class="keyword">else</span> : <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;Loss type [&#123;:s&#125;] is not recognized.&#x27;</span>.<span class="built_in">format</span>(train_info[<span class="string">&#x27;pxl_criterion&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># optimizers</span></span><br><span class="line">optimizers = []</span><br><span class="line">optim_params = []</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">    <span class="keyword">if</span> v.requires_grad:</span><br><span class="line">        optim_params.append(v)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Parameters [%s] will not be optimized.&#x27;</span>%(k))</span><br><span class="line">optimizer = torch.optim.Adam(optim_params, lr=train_info[<span class="string">&#x27;learning_rate&#x27;</span>], betas=train_info[<span class="string">&#x27;optim_betas&#x27;</span>],</span><br><span class="line">                            weight_decay=train_info[<span class="string">&#x27;weight_decay&#x27;</span>])</span><br><span class="line">optimizers.append(optimizer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># scheduler</span></span><br><span class="line">schedulers = []</span><br><span class="line"><span class="keyword">for</span> opt <span class="keyword">in</span> optimizers:</span><br><span class="line">    schedulers.append(CosineAnnealingLR_Restart(opt, train_info[<span class="string">&#x27;T_period&#x27;</span>], eta_min=train_info[<span class="string">&#x27;eta_min&#x27;</span>],</span><br><span class="line">                                               restarts=train_info[<span class="string">&#x27;restarts&#x27;</span>], weights=train_info[<span class="string">&#x27;restart_weights&#x27;</span>]))</span><br><span class="line">model.train()</span><br><span class="line">    </span><br><span class="line">start_epoch = <span class="number">0</span></span><br><span class="line">current_step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(start_epoch, train_epochs):</span><br><span class="line">    <span class="keyword">for</span> batch_index, train_data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        current_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> current_step &gt; train_iters: <span class="keyword">break</span></span><br><span class="line">        <span class="comment">## update lr</span></span><br><span class="line">        update_learning_rate(optimizers, schedulers, current_step, warmup_iter=train_info[<span class="string">&#x27;warmup_iter&#x27;</span>])</span><br><span class="line">        lr_img, gt_img = train_data[<span class="string">&#x27;LR&#x27;</span>].to(device), train_data[<span class="string">&#x27;GT&#x27;</span>].to(device)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        hr_img = model(lr_img)</span><br><span class="line">        loss_pxl = loss_func(hr_img, gt_img) * train_info[<span class="string">&#x27;pxl_weight&#x27;</span>]</span><br><span class="line">        loss_pxl.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span> current_step%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Training Epoch: &#123;&#125;/&#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.2f&#125;%)]\tLoss: &#123;:.6f&#125;&#x27;</span>.<span class="built_in">format</span>(epoch+<span class="number">1</span>, train_epochs,</span><br><span class="line">                  (batch_index+<span class="number">1</span>)*<span class="built_in">len</span>(lr_img), <span class="built_in">len</span>(train_loader.dataset), <span class="number">100.</span>*(batch_index+<span class="number">1</span>)/<span class="built_in">len</span>(train_loader), loss_pxl.item()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_network</span>(<span class="params">network, network_label, iter_label</span>):</span><br><span class="line">    save_filename = <span class="string">&#x27;&#123;&#125;_&#123;&#125;.pth&#x27;</span>.<span class="built_in">format</span>(iter_label, network_label)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(network, nn.DataParallel):</span><br><span class="line">        network = network.module</span><br><span class="line">    state_dict = network.state_dict()</span><br><span class="line">    <span class="keyword">for</span> key, param <span class="keyword">in</span> state_dict.items():</span><br><span class="line">        state_dict[key] = param.cpu()</span><br><span class="line">    torch.save(state_dict, save_filename)</span><br><span class="line"></span><br><span class="line">save_network(model, <span class="string">&#x27;EDSR&#x27;</span>, <span class="string">&#x27;DIV2K_%d&#x27;</span>%train_info[<span class="string">&#x27;train_iter_num&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Test-EDSR"><a href="#Test-EDSR" class="headerlink" title="Test EDSR"></a>Test EDSR</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_path = <span class="string">&#x27;img_005_SRF_2_LR.png&#x27;</span></span><br><span class="line"></span><br><span class="line">test_img = read_image(<span class="literal">None</span>, test_path)</span><br><span class="line"><span class="keyword">if</span> test_img.shape[<span class="number">2</span>] == <span class="number">3</span>: test_img = test_img[:,:,::-<span class="number">1</span>]</span><br><span class="line">test_img = torch.from_numpy(np.ascontiguousarray(np.transpose(test_img, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)))).<span class="built_in">float</span>()</span><br><span class="line">test_img = test_img.unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    hr_img = model(test_img).data.<span class="built_in">float</span>().cpu().clamp_(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">hr_img = hr_img.squeeze().numpy()</span><br><span class="line">hr_img = np.transpose(hr_img, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))</span><br><span class="line">hr_img = (hr_img[:,:,::-<span class="number">1</span>]*<span class="number">255</span>).<span class="built_in">round</span>()</span><br><span class="line"><span class="built_in">print</span>(hr_img.shape)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;img_005_SRF_2_HR_EDSR.png&#x27;</span>, hr_img)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Super Resolution</category>
      </categories>
      <tags>
        <tag>CNN</tag>
        <tag>Deep Learning</tag>
        <tag>SR</tag>
        <tag>Super Resolution</tag>
        <tag>画质算法</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Guided Filter</title>
    <url>/2024/05/25/GuidedFilter/</url>
    <content><![CDATA[<p><code>NR</code>, <code>DeNoise</code></p>
<span id="more"></span>

<h1 id="导向滤波-Guided-Filter"><a href="#导向滤波-Guided-Filter" class="headerlink" title="导向滤波(Guided Filter)"></a>导向滤波(Guided Filter)</h1><ul>
<li>参考文献：<a href="https://people.csail.mit.edu/kaiming/publications/eccv10guidedfilter.pdf">Kaiming He, Jian Sun, Xiaoou Tang, Guided Image Filtering. IEEE Transactions on Pattern Analysis and Machine Intelligence, Volume 35, Issue 6, pp. 1397-1409, June 2013</a></li>
</ul>
<h1 id="算法流程-实现"><a href="#算法流程-实现" class="headerlink" title="算法流程&amp;实现"></a>算法流程&amp;实现</h1><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="/images/posts/gf_alg_flow.png" alt="guided filter"></p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p><code>I</code>为导向图，<code>P</code>为待滤波图，<code>k</code>为滤波窗口尺寸，<code>eps</code>为滤波强度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guided_filter</span>(<span class="params">I, P, k, eps</span>):</span><br><span class="line">    mean_I = cv2.boxFilter(I, -<span class="number">1</span>, (k, k))</span><br><span class="line">    mean_P = cv2.boxFilter(P, -<span class="number">1</span>, (k, k))</span><br><span class="line"></span><br><span class="line">    mean_II = cv2.boxFilter(I * I, -<span class="number">1</span>, (k, k))</span><br><span class="line">    mean_IP = cv2.boxFilter(I * P, -<span class="number">1</span>, (k, k))</span><br><span class="line">    </span><br><span class="line">    var_I = mean_II - mean_I * mean_I</span><br><span class="line">    cov_IP = mean_IP - mean_I * mean_P</span><br><span class="line">    </span><br><span class="line">    a = cov_IP / (var_I + eps)</span><br><span class="line">    b = mean_P - a * mean_I</span><br><span class="line">    </span><br><span class="line">    mean_a = cv2.boxFilter(a, -<span class="number">1</span>, (k, k))</span><br><span class="line">    mean_b = cv2.boxFilter(b, -<span class="number">1</span>, (k, k))</span><br><span class="line">    </span><br><span class="line">    q = mean_a * I + mean_b <span class="comment"># test</span></span><br><span class="line">    <span class="keyword">return</span> q</span><br></pre></td></tr></table></figure>
<p>实际应用中，<code>I</code>与<code>P</code>通常是同一张图，算法简化为Self-Guided Filter：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guided_filter</span>(<span class="params">I, k, eps</span>):</span><br><span class="line">    mean_I = cv2.boxFilter(I, -<span class="number">1</span>, (k, k))</span><br><span class="line">    mean_II = cv2.boxFilter(I * I, -<span class="number">1</span>, (k, k))</span><br><span class="line">    </span><br><span class="line">    var_I = mean_II - mean_I * mean_I</span><br><span class="line">    </span><br><span class="line">    a = var_I / (var_I + eps)</span><br><span class="line">    b = mean_I - a * mean_I</span><br><span class="line">    </span><br><span class="line">    mean_a = cv2.boxFilter(a, -<span class="number">1</span>, (k, k))</span><br><span class="line">    mean_b = cv2.boxFilter(b, -<span class="number">1</span>, (k, k))</span><br><span class="line">    </span><br><span class="line">    q = mean_a * I + mean_b <span class="comment"># test</span></span><br><span class="line">    <span class="keyword">return</span> q</span><br></pre></td></tr></table></figure>
<p>工程应用中，还可以根据实际应用场景，进一步简化，如：</p>
<ul>
<li>将<code>I</code>缩小到指定倍率计算<code>mean_a</code>和<code>mean_b</code>，再将<code>mean_a</code>和<code>mean_b</code>放大到与<code>I</code>同尺寸后做最终滤波输出（fast self-Guided filter）</li>
<li>减小<code>mean_a</code>和<code>mean_b</code>的均值滤波窗口，甚至不做均值滤波（OCL实现时，可以放在一个kernel，显著提升计算效率）</li>
</ul>
]]></content>
      <categories>
        <category>Noise Reduction</category>
      </categories>
      <tags>
        <tag>画质算法</tag>
        <tag>图像处理</tag>
        <tag>NR</tag>
        <tag>DeNoise</tag>
        <tag>Noise Reduction</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/06/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>SR</tag>
        <tag>Super Resolution</tag>
        <tag>画质算法</tag>
        <tag>图像处理</tag>
        <tag>视频处理</tag>
      </tags>
  </entry>
</search>
